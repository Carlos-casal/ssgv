{% extends 'layout/app.html.twig' %}

{% block page_title %}Asistencia al Servicio: {{ service.title }}{% endblock %}

{% block content %}
<div class="p-6 space-y-6">
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
            <h2 class="text-2xl font-bold text-gray-900">Asistencia al Servicio: {{ service.title }}</h2>
            <p class="text-gray-600">A continuación se muestra la lista de asistentes y no asistentes.</p>
        </div>
    </div>

    <div class="flex justify-end mb-4 gap-4">
        <button id="add-manual-btn" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            Añadir Voluntario
        </button>
        <button id="fichar-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            Fichar
        </button>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <h3 class="text-lg font-bold text-gray-900 p-4 border-b">Asistentes</h3>
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="text-left px-6 py-3 text-sm font-medium text-gray-900">Nombre</th>
                            <th class="text-left px-6 py-3 text-sm font-medium text-gray-900">Apellidos</th>
                            <th class="text-left px-6 py-3 text-sm font-medium text-gray-900">Acción</th>
                        </tr>
                    </thead>
                    <tbody id="attendees-table-body" class="divide-y divide-gray-200">
                        {% set attendees = service.assistanceConfirmations|filter(c => c.hasAttended) %}
                        {% for confirmation in attendees %}
                            <tr id="volunteer-row-{{ confirmation.volunteer.id }}" data-volunteer-id="{{ confirmation.volunteer.id }}">
                                <td class="px-6 py-4">{{ confirmation.volunteer.name }}</td>
                                <td class="px-6 py-4">{{ confirmation.volunteer.lastName }}</td>
                                <td class="px-6 py-4">
                                    <button class="toggle-attendance-btn text-red-600 hover:text-red-800 text-sm" data-action="unattend">
                                        No asiste
                                    </button>
                                </td>
                            </tr>
                        {% endfor %}
                        {% if attendees is empty %}
                            <tr id="no-attendees-row">
                                <td colspan="3" class="px-6 py-8 text-center text-gray-500">
                                    No hay asistentes confirmados.
                                </td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            <h3 class="text-lg font-bold text-gray-900 p-4 border-b">No Asistentes</h3>
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="text-left px-6 py-3 text-sm font-medium text-gray-900">Nombre</th>
                            <th class="text-left px-6 py-3 text-sm font-medium text-gray-900">Apellidos</th>
                            <th class="text-left px-6 py-3 text-sm font-medium text-gray-900">Acción</th>
                        </tr>
                    </thead>
                    <tbody id="non-attendees-table-body" class="divide-y divide-gray-200">
                        {% set nonAttendees = service.assistanceConfirmations|filter(c => not c.hasAttended) %}
                        {% for confirmation in nonAttendees %}
                            <tr id="volunteer-row-{{ confirmation.volunteer.id }}" data-volunteer-id="{{ confirmation.volunteer.id }}">
                                <td class="px-6 py-4">{{ confirmation.volunteer.name }}</td>
                                <td class="px-6 py-4">{{ confirmation.volunteer.lastName }}</td>
                                <td class="px-6 py-4">
                                    <button class="toggle-attendance-btn text-green-600 hover:text-green-800 text-sm" data-action="attend">
                                        Asiste
                                    </button>
                                </td>
                            </tr>
                        {% endfor %}
                        {% if nonAttendees is empty %}
                            <tr id="no-non-attendees-row">
                                <td colspan="3" class="px-6 py-8 text-center text-gray-500">
                                    No hay voluntarios que no asistan.
                                </td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Fichar Modal -->
<div id="fichar-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden z-40">
    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-4xl max-h-[90vh] flex flex-col">
        <div class="flex justify-between items-center border-b pb-3 mb-4">
            <h3 class="text-xl font-bold">Fichar Asistencia</h3>
            <button type="button" id="cancel-fichar-btn" class="p-1 rounded-full hover:bg-gray-200">
                <i data-lucide="x" class="w-5 h-5"></i>
            </button>
        </div>

        {{ form_start(form, {'action': path('app_service_fichaje', {'id': service.id})}) }}
        <div class="border-b pb-4 mb-4">
            <h4 class="text-lg font-semibold mb-2">Modificar Horario para Todos</h4>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="master-checkin-time" class="block text-sm font-medium text-gray-700">Hora Entrada General</label>
                    <input type="time" id="master-checkin-time" class="form-input mt-1 w-full">
                </div>
                <div>
                    <label for="master-checkout-time" class="block text-sm font-medium text-gray-700">Hora Salida General</label>
                    <input type="time" id="master-checkout-time" class="form-input mt-1 w-full">
                </div>
            </div>
        </div>

        <div class="overflow-y-auto">
            <table class="w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="text-left px-4 py-2 text-sm font-medium text-gray-700">Voluntario</th>
                        <th class="text-left px-4 py-2 text-sm font-medium text-gray-700">Hora Entrada</th>
                        <th class="text-left px-4 py-2 text-sm font-medium text-gray-700">Hora Salida</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    {% for confirmation_form in form.assistanceConfirmations %}
                        {% set confirmation = confirmation_form.vars.data %}
                        {% if confirmation and confirmation.isHasAttended %}
                            <tr>
                                <td class="px-4 py-2 whitespace-nowrap align-middle">
                                    {{ confirmation.volunteer.name }} {{ confirmation.volunteer.lastName }}
                                </td>
                                <td class="px-4 py-2">
                                    {{ form_widget(confirmation_form.checkInTime, {'attr': {'class': 'checkin-time-input'}}) }}
                                </td>
                                <td class="px-4 py-2">
                                    {{ form_widget(confirmation_form.checkOutTime, {'attr': {'class': 'checkout-time-input'}}) }}
                                </td>
                            </tr>
                        {% endif %}
                    {% endfor %}
                </tbody>
            </table>
        </div>
        <div class="flex justify-end gap-4 border-t pt-4 mt-auto">
            <button type="button" id="cancel-fichar-btn-footer" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition-colors">Cancelar</button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">Guardar Horas</button>
        </div>
        {{ form_end(form) }}
    </div>
</div>

<!-- Add Manual Modal -->
<div id="add-manual-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl max-h-[90vh] flex flex-col">
        <div class="flex justify-between items-center border-b pb-3 mb-4">
            <h3 class="text-xl font-bold">Añadir Voluntarios Manualmente</h3>
            <button type="button" id="cancel-add-manual-btn" class="p-1 rounded-full hover:bg-gray-200">
                <i data-lucide="x" class="w-5 h-5"></i>
            </button>
        </div>
        <div class="mb-4">
            <input type="text" id="add-manual-search-input" class="form-input w-full" placeholder="Buscar por nombre, apellidos o DNI...">
        </div>
        <div id="add-manual-list" class="flex-grow overflow-y-auto border rounded-lg p-2 space-y-2">
            <!-- Volunteer list will be populated by JS -->
            <p class="text-gray-500 text-center">Cargando voluntarios...</p>
        </div>
        <div class="flex justify-end gap-4 border-t pt-4 mt-4">
            <button type="button" id="cancel-add-manual-btn-footer" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition-colors">Cancelar</button>
            <button type="button" id="save-manual-add-btn" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">Añadir Seleccionados</button>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('turbo:load', () => {
            const serviceId = '{{ service.id }}';
            const attendeesTableBody = document.getElementById('attendees-table-body');
            const nonAttendeesTableBody = document.getElementById('non-attendees-table-body');

            // Data from service for Fichar modal
            const serviceTimeAtBase = '{{ service.timeAtBase ? service.timeAtBase|date('H:i') : '' }}';
            const serviceDepartureTime = '{{ service.departureTime ? service.departureTime|date('H:i') : '' }}';

            function createRow(volunteerId, name, lastName, action) {
                const tr = document.createElement('tr');
                tr.id = `volunteer-row-${volunteerId}`;
                tr.dataset.volunteerId = volunteerId;

                const actionText = action === 'attend' ? 'Asiste' : 'No asiste';
                const actionColor = action === 'attend' ? 'text-green-600 hover:text-green-800' : 'text-red-600 hover:text-red-800';

                tr.innerHTML = `
                    <td class="px-6 py-4">${name}</td>
                    <td class="px-6 py-4">${lastName}</td>
                    <td class="px-6 py-4">
                        <button class="toggle-attendance-btn ${actionColor} text-sm" data-action="${action}">
                            ${actionText}
                        </button>
                    </td>
                `;
                return tr;
            }

            function updateTableMessages() {
                const noAttendeesRow = attendeesTableBody.querySelector('#no-attendees-row');
                if (attendeesTableBody.querySelectorAll('tr[data-volunteer-id]').length === 0) {
                    if (!noAttendeesRow) {
                        attendeesTableBody.innerHTML = '<tr id="no-attendees-row"><td colspan="3" class="px-6 py-8 text-center text-gray-500">No hay asistentes confirmados.</td></tr>';
                    }
                } else if (noAttendeesRow) {
                    noAttendeesRow.remove();
                }

                const noNonAttendeesRow = nonAttendeesTableBody.querySelector('#no-non-attendees-row');
                if (nonAttendeesTableBody.querySelectorAll('tr[data-volunteer-id]').length === 0) {
                    if (!noNonAttendeesRow) {
                        nonAttendeesTableBody.innerHTML = '<tr id="no-non-attendees-row"><td colspan="3" class="px-6 py-8 text-center text-gray-500">No hay voluntarios que no asistan.</td></tr>';
                    }
                } else if (noNonAttendeesRow) {
                    noNonAttendeesRow.remove();
                }
            }


            document.body.addEventListener('click', async (e) => {
                if (e.target.classList.contains('toggle-attendance-btn')) {
                    const button = e.target;
                    const row = button.closest('tr');
                    const volunteerId = row.dataset.volunteerId;

                    try {
                        const response = await fetch(`/servicios/${serviceId}/toggle-attendance/${volunteerId}`, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });

                        if (!response.ok) throw new Error('Network response was not ok');

                        const result = await response.json();

                        if (result.status === 'success') {
                            const name = row.children[0].textContent;
                            const lastName = row.children[1].textContent;
                            row.remove();

                            if (result.newState === true) { // Moved to attending
                                attendeesTableBody.appendChild(createRow(volunteerId, name, lastName, 'unattend'));
                            } else { // Moved to not attending
                                nonAttendeesTableBody.appendChild(createRow(volunteerId, name, lastName, 'attend'));
                            }
                            updateTableMessages();
                            location.reload(); // Reload to update the form for the fichar modal
                        } else {
                            alert('Error: ' + result.message);
                        }
                    } catch (error) {
                        console.error('Error toggling attendance:', error);
                        alert('No se pudo cambiar el estado de asistencia.');
                    }
                }
            });

            // --- Fichar Modal Logic ---
            const ficharBtn = document.getElementById('fichar-btn');
            const ficharModal = document.getElementById('fichar-modal');
            const cancelFicharBtn = document.getElementById('cancel-fichar-btn');
            const cancelFicharFooterBtn = document.getElementById('cancel-fichar-btn-footer');
            const masterCheckin = document.getElementById('master-checkin-time');
            const masterCheckout = document.getElementById('master-checkout-time');

            function openFicharModal() {
                // Pre-fill times for volunteers who don't have one set
                ficharModal.querySelectorAll('.checkin-time-input').forEach(input => {
                    if (!input.value && serviceTimeAtBase) input.value = serviceTimeAtBase;
                });
                ficharModal.querySelectorAll('.checkout-time-input').forEach(input => {
                    if (!input.value && serviceDepartureTime) input.value = serviceDepartureTime;
                });
                ficharModal.classList.remove('hidden');
            }

            function closeFicharModal() {
                ficharModal.classList.add('hidden');
            }

            if(ficharBtn) ficharBtn.addEventListener('click', openFicharModal);
            if(cancelFicharBtn) cancelFicharBtn.addEventListener('click', closeFicharModal);
            if(cancelFicharFooterBtn) cancelFicharFooterBtn.addEventListener('click', closeFicharModal);

            if(masterCheckin) {
                masterCheckin.addEventListener('input', (e) => {
                    ficharModal.querySelectorAll('.checkin-time-input').forEach(input => input.value = e.target.value);
                });
            }
            if(masterCheckout) {
                masterCheckout.addEventListener('input', (e) => {
                    ficharModal.querySelectorAll('.checkout-time-input').forEach(input => input.value = e.target.value);
                });
            }


            // --- Add Manual Modal Logic ---
            const addManualBtn = document.getElementById('add-manual-btn');
            const addManualModal = document.getElementById('add-manual-modal');
            const cancelAddManualBtn = document.getElementById('cancel-add-manual-btn');
            const cancelAddManualFooterBtn = document.getElementById('cancel-add-manual-btn-footer');
            const saveManualAddBtn = document.getElementById('save-manual-add-btn');
            const addManualList = document.getElementById('add-manual-list');
            const addManualSearchInput = document.getElementById('add-manual-search-input');
            let allVolunteers = []; // Cache for the list

            async function openAddManualModal() {
                addManualModal.classList.remove('hidden');
                addManualList.innerHTML = '<p class="text-gray-500 text-center">Cargando voluntarios...</p>';
                try {
                    const response = await fetch('{{ path('app_volunteer_list_all') }}');
                    allVolunteers = await response.json();
                    renderVolunteerList(allVolunteers);
                } catch (error) {
                    console.error('Error fetching volunteers:', error);
                    addManualList.innerHTML = '<p class="text-red-500 text-center">Error al cargar la lista.</p>';
                }
            }

            function closeAddManualModal() {
                addManualModal.classList.add('hidden');
                addManualSearchInput.value = '';
            }

            function renderVolunteerList(volunteers) {
                addManualList.innerHTML = '';
                if (volunteers.length === 0) {
                    addManualList.innerHTML = '<p class="text-gray-500 text-center">No se encontraron voluntarios.</p>';
                    return;
                }
                volunteers.forEach(v => {
                    const div = document.createElement('div');
                    div.className = 'flex items-center';
                    div.innerHTML = `
                        <input id="add-volunteer-${v.id}" value="${v.id}" type="checkbox" class="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500 add-volunteer-checkbox">
                        <label for="add-volunteer-${v.id}" class="ml-3 block text-sm text-gray-900">
                           (${v.id}) ${v.name} ${v.lastName}
                        </label>
                    `;
                    addManualList.appendChild(div);
                });
            }

            if(addManualBtn) addManualBtn.addEventListener('click', openAddManualModal);
            if(cancelAddManualBtn) cancelAddManualBtn.addEventListener('click', closeAddManualModal);
            if(cancelAddManualFooterBtn) cancelAddManualFooterBtn.addEventListener('click', closeAddManualModal);

            if(addManualSearchInput) {
                addManualSearchInput.addEventListener('input', (e) => {
                    const query = e.target.value.toLowerCase();
                    const filteredVolunteers = allVolunteers.filter(v =>
                        v.name.toLowerCase().includes(query) ||
                        v.lastName.toLowerCase().includes(query) ||
                        (v.dni && v.dni.toLowerCase().includes(query)) ||
                        v.id.toString().includes(query)
                    );
                    renderVolunteerList(filteredVolunteers);
                });
            }

            if(saveManualAddBtn) {
                saveManualAddBtn.addEventListener('click', async () => {
                    const selectedIds = Array.from(document.querySelectorAll('.add-volunteer-checkbox:checked')).map(cb => cb.value);

                    if (selectedIds.length === 0) {
                        alert('Por favor, selecciona al menos un voluntario.');
                        return;
                    }

                    try {
                        const response = await fetch(`/servicios/${serviceId}/add-volunteers`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
                            body: JSON.stringify({ volunteerIds: selectedIds })
                        });
                        const result = await response.json();
                        if (response.ok) {
                            alert(result.message);
                            location.reload(); // Reload to see changes
                        } else {
                            throw new Error(result.message || 'Error adding volunteers');
                        }
                    } catch (error) {
                        console.error('Error saving volunteers:', error);
                        alert('No se pudieron añadir los voluntarios.');
                    }
                });
            }
        });
    </script>
{% endblock %}
