{# templates/service/edit_service.html.twig #}

{% extends 'layout/app.html.twig' %} {# Asegúrate de que tu layout base es 'layout/app.html.twig' #}

{% block page_title %}Editar Servicio{% endblock %}

{% block content %}

    <div class="container mx-auto p-6">
        <h1 class="text-2xl font-bold mb-6 text-gray-900">Editar Servicio</h1>

        {# Mensajes flash #}
        {% for message in app.flashes('success') %}
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span class="block sm:inline">{{ message }}</span>
            </div>
        {% endfor %}
        {% for message in app.flashes('error') %}
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                <span class="block sm:inline">{{ message }}</span>
            </div>
        {% endfor %}

        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="datos_basicos-tab" data-toggle="tab" href="#datos_basicos" role="tab" aria-controls="datos_basicos"
                aria-selected="true"><i class="fas fa-file-signature"></i> Datos básicos</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="asistencias-tab" data-toggle="tab" href="#asistencias" role="tab" aria-controls="asistencias"
                aria-selected="false"><i class="fas fa-users"></i> Confirmaciones de asistencia</a>
            </li>
        </ul>
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="datos_basicos" role="tabpanel" aria-labelledby="datos_basicos-tab">
                {{ form_start(form, {'attr': {'class': 'bg-white p-6 rounded-lg shadow-md'}}) }}

                <div class="space-y-8">
                    {# Row 1 #}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>{{ form_row(form.numeration) }}</div>
                        <div>{{ form_row(form.title) }}</div>
                        <div>{{ form_row(form.locality) }}</div>
                    </div>

                    {# Row 2 #}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>{{ form_row(form.startDate) }}</div>
                        <div>{{ form_row(form.timeAtBase) }}</div>
                        <div>{{ form_row(form.endDate) }}</div>
                    </div>

                    {# Row 3 #}
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>{{ form_row(form.registrationLimitDate) }}</div>
                        <div>{{ form_row(form.type) }}</div>
                        <div>{{ form_row(form.category) }}</div>
                    </div>

                    {# Row 4 - Recursos #}
                    <div>
                        <h3 class="text-lg font-semibold mb-2 border-b pb-1">Recursos</h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6">
                            <div>{{ form_row(form.afluencia) }}</div>
                            <div>{{ form_row(form.numSvb) }}</div>
                            <div>{{ form_row(form.numSva) }}</div>
                            <div>{{ form_row(form.numSvae) }}</div>
                            <div>{{ form_row(form.numMedical) }}</div>
                            <div class="flex items-center pt-6">{{ form_row(form.hasFieldHospital) }}</div>
                            <div class="flex items-center pt-6">{{ form_row(form.hasProvisions) }}</div>
                        </div>
                    </div>

                    {# Row 5 - Tareas y Descripción #}
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            {{ form_label(form.tasks) }}
                            <div id="tasks-editor-edit"></div>
                            {{ form_widget(form.tasks, {'id': 'tasks_textarea_edit', 'attr': {'style': 'display:none;'}}) }}
                            {{ form_errors(form.tasks) }}
                        </div>
                        <div>
                            {{ form_label(form.description) }}
                            <div id="quill-editor-edit"></div>
                            {{ form_widget(form.description, {'id': 'description_textarea_edit', 'attr': {'style': 'display:none;'}}) }}
                            {{ form_errors(form.description) }}
                        </div>
                    </div>

                    {# Row 6 - Recipients #}
                    <div>
                        <h3 class="text-lg font-semibold mb-2 border-b pb-1">Destinatarios</h3>
                        {{ form_row(form.recipients) }}
                    </div>
                </div>

                <div class="mt-8 text-center">
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                        Guardar Cambios
                    </button>
                </div>

                {{ form_end(form) }}
            </div>
            <div class="tab-pane fade" id="asistencias" role="tabpanel" aria-labelledby="asistencias-tab">
                <div class="row">
                    <div class="col-lg-12" style="padding-left:2em;">
                        <button type="button" class="pcam-btn-gris" id="servicios_btn_add_respuesta_voluntario" onclick="servicios_asistentes_add_open_modal()"><i class="fas fa-plus-square"></i> Añadir usuarios</button>
                        <button type="button" class="pcam-btn-gris" id="servicios_btn_fichar_todos" onclick="servicios_fichar_todos_open_modal()"><i class="fas fa-clock"></i> Fichar a todos</button>
                    </div>
                </div>

                <div class="row" style="padding: 0em 1em 0em 1em !important;">
                    <div class="col-lg-4" style="margin-top:1em;">
                    <button type="button" class="list-group-item list-group-item-action active">Asisten <span class="badge badge-light" id="n_asistentes"></span></button>
                        <ul class="list-group" id="servicio-listado-asistentes">

                        </ul>
                    </div>

                    <div class="col-lg-4" style="margin-top:1em;">
                    <button type="button" class="list-group-item list-group-item-action active">Reserva <span class="badge badge-light" id="n_reserva"></span></button>
                    <ul class="list-group" id="servicio-listado-reserva">

                    </ul>
                    </div>

                    <div class="col-lg-4" style="margin-top:1em;">
                    <button type="button" class="list-group-item list-group-item-action active">No asisten <span class="badge badge-light" id="n_no_asistentes"></span></button>
                    <ul class="list-group" id="servicio-listado-no-asistentes">

                    </ul>
                    </div>

                </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"></script>
    <script>
        // --- Custom Link Sanitizer for Quill ---
        const Link = Quill.import('formats/link');
        class CustomLink extends Link {
            static sanitize(url) {
                const sanitizedUrl = super.sanitize(url);
                if (sanitizedUrl && sanitizedUrl !== 'about:blank' && !/^(https?:\/\/|mailto:|tel:)/.test(sanitizedUrl)) {
                    return 'https://' + sanitizedUrl;
                }
                return sanitizedUrl;
            }
        }
        Quill.register(CustomLink, true);
        // --- End Custom Link Sanitizer ---

        const quillInstances = {};

        function setupQuill(containerId, textareaId) {
            const editorContainer = document.querySelector(containerId);
            const hiddenTextarea = document.querySelector(textareaId);

            if (!editorContainer || !hiddenTextarea || quillInstances[containerId]) {
                return;
            }

            const toolbarOptions = [
                [{ 'header': [1, 2, 3, false] }],
                ['bold', 'italic', 'strike', 'underline'],
                [{ 'script': 'sub'}, { 'script': 'super' }],
                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                [{ 'align': [] }],
                ['link'],
                ['clean']
            ];

            const quill = new Quill(editorContainer, {
                modules: { toolbar: toolbarOptions },
                theme: 'snow'
            });

            // Pre-fill editor with existing content
            quill.root.innerHTML = hiddenTextarea.value;

            quill.on('text-change', function() {
                hiddenTextarea.value = quill.root.innerHTML;
            });

            quillInstances[containerId] = quill;
        }

        function initializeAllQuillEditors() {
            setupQuill('#quill-editor-edit', '#description_textarea_edit');
            setupQuill('#tasks-editor-edit', '#tasks_textarea_edit');
        }

        document.addEventListener('turbo:before-cache', function() {
            for (const key in quillInstances) {
                if (quillInstances.hasOwnProperty(key)) {
                    quillInstances[key] = null;
                }
            }
        });

        document.addEventListener('turbo:load', initializeAllQuillEditors);
        document.addEventListener('DOMContentLoaded', function() {
            initializeAllQuillEditors();
            const tabsContainer = document.getElementById('myTab');
            const tabContents = document.getElementById('myTabContent');

            if (tabsContainer && tabContents) {
                tabsContainer.addEventListener('click', function(event) {
                    const clickedButton = event.target.closest('[role="tab"]'); // Encuentra el botón de la pestaña clickeado
                    if (!clickedButton) {
                        return; // No es un botón de pestaña, salimos
                    }

                    const targetId = clickedButton.dataset.tabsTarget; // Obtiene el ID del contenido objetivo (ej. '#basic-data')
                    const targetContent = tabContents.querySelector(targetId);

                    if (!targetContent) {
                        console.error('Contenido de pestaña no encontrado para:', targetId);
                        return;
                    }

                    // 1. Ocultar todos los contenidos de las pestañas
                    tabContents.querySelectorAll('[role="tabpanel"]').forEach(panel => {
                        panel.classList.add('hidden');
                        panel.setAttribute('aria-hidden', 'true'); // Mejor accesibilidad
                    });

                    // 2. Desactivar visualmente todas las pestañas
                    tabsContainer.querySelectorAll('[role="tab"]').forEach(tabButton => {
                        tabButton.setAttribute('aria-selected', 'false');
                        // Ajusta las clases para el estilo de pestaña inactiva (ej. borde gris, texto gris)
                        tabButton.classList.remove('text-blue-600', 'border-blue-600'); // Quita estilos de activa
                        tabButton.classList.add('text-gray-500', 'border-transparent', 'hover:text-gray-600', 'hover:border-gray-300'); // Añade estilos de inactiva
                    });

                    // 3. Mostrar el contenido de la pestaña clickeada
                    targetContent.classList.remove('hidden');
                    targetContent.setAttribute('aria-hidden', 'false');

                    // 4. Activar visualmente la pestaña clickeada
                    clickedButton.setAttribute('aria-selected', 'true');
                    // Ajusta las clases para el estilo de pestaña activa (ej. borde azul, texto azul)
                    clickedButton.classList.remove('text-gray-500', 'border-transparent', 'hover:text-gray-600', 'hover:border-gray-300'); // Quita estilos de inactiva
                    clickedButton.classList.add('text-blue-600', 'border-blue-600'); // Añade estilos de activa
                });

                // Opcional: Activar la primera pestaña por defecto al cargar
                // Esto simula un click en la primera pestaña
                const initialTab = tabsContainer.querySelector('[role="tab"][aria-selected="true"]') || tabsContainer.querySelector('[role="tab"]');
                if(initialTab) {
                    initialTab.click();
                } else {
                    // Si no hay ninguna pestaña seleccionada por defecto, muestra el primer panel
                    const firstPanel = tabContents.querySelector('[role="tabpanel"]');
                    if (firstPanel) {
                        firstPanel.classList.remove('hidden');
                        firstPanel.setAttribute('aria-hidden', 'false');
                    }
                }
            }
        });
    </script>
{% endblock %}